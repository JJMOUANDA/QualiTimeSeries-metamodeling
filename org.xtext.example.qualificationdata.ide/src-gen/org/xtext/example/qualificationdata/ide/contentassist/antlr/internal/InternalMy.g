/*
 * generated by Xtext 2.27.0
 */
grammar InternalMy;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.example.qualificationdata.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.qualificationdata.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.qualificationdata.services.MyGrammarAccess;

}
@parser::members {
	private MyGrammarAccess grammarAccess;

	public void setGrammarAccess(MyGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleSerieTemporelle
entryRuleSerieTemporelle
:
{ before(grammarAccess.getSerieTemporelleRule()); }
	 ruleSerieTemporelle
{ after(grammarAccess.getSerieTemporelleRule()); } 
	 EOF 
;

// Rule SerieTemporelle
ruleSerieTemporelle 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSerieTemporelleAccess().getGroup()); }
		(rule__SerieTemporelle__Group__0)
		{ after(grammarAccess.getSerieTemporelleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMesure
entryRuleMesure
:
{ before(grammarAccess.getMesureRule()); }
	 ruleMesure
{ after(grammarAccess.getMesureRule()); } 
	 EOF 
;

// Rule Mesure
ruleMesure 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMesureAccess().getGroup()); }
		(rule__Mesure__Group__0)
		{ after(grammarAccess.getMesureAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleQualification
entryRuleQualification
:
{ before(grammarAccess.getQualificationRule()); }
	 ruleQualification
{ after(grammarAccess.getQualificationRule()); } 
	 EOF 
;

// Rule Qualification
ruleQualification 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getQualificationAccess().getAlternatives()); }
		(rule__Qualification__Alternatives)
		{ after(grammarAccess.getQualificationAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAutoQualification
entryRuleAutoQualification
:
{ before(grammarAccess.getAutoQualificationRule()); }
	 ruleAutoQualification
{ after(grammarAccess.getAutoQualificationRule()); } 
	 EOF 
;

// Rule AutoQualification
ruleAutoQualification 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAutoQualificationAccess().getGroup()); }
		(rule__AutoQualification__Group__0)
		{ after(grammarAccess.getAutoQualificationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleManuelleQualification
entryRuleManuelleQualification
:
{ before(grammarAccess.getManuelleQualificationRule()); }
	 ruleManuelleQualification
{ after(grammarAccess.getManuelleQualificationRule()); } 
	 EOF 
;

// Rule ManuelleQualification
ruleManuelleQualification 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getManuelleQualificationAccess().getGroup()); }
		(rule__ManuelleQualification__Group__0)
		{ after(grammarAccess.getManuelleQualificationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEString
entryRuleEString
:
{ before(grammarAccess.getEStringRule()); }
	 ruleEString
{ after(grammarAccess.getEStringRule()); } 
	 EOF 
;

// Rule EString
ruleEString 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEStringAccess().getAlternatives()); }
		(rule__EString__Alternatives)
		{ after(grammarAccess.getEStringAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEInt
entryRuleEInt
:
{ before(grammarAccess.getEIntRule()); }
	 ruleEInt
{ after(grammarAccess.getEIntRule()); } 
	 EOF 
;

// Rule EInt
ruleEInt 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEIntAccess().getGroup()); }
		(rule__EInt__Group__0)
		{ after(grammarAccess.getEIntAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEDate
entryRuleEDate
:
{ before(grammarAccess.getEDateRule()); }
	 ruleEDate
{ after(grammarAccess.getEDateRule()); } 
	 EOF 
;

// Rule EDate
ruleEDate 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEDateAccess().getAlternatives()); }
		(rule__EDate__Alternatives)
		{ after(grammarAccess.getEDateAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Qualification__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getQualificationAccess().getAutoQualificationParserRuleCall_0()); }
		ruleAutoQualification
		{ after(grammarAccess.getQualificationAccess().getAutoQualificationParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getQualificationAccess().getManuelleQualificationParserRuleCall_1()); }
		ruleManuelleQualification
		{ after(grammarAccess.getQualificationAccess().getManuelleQualificationParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EString__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
		RULE_ID
		{ after(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EDate__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEDateAccess().getSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getEDateAccess().getSTRINGTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getEDateAccess().getIDTerminalRuleCall_1()); }
		RULE_ID
		{ after(grammarAccess.getEDateAccess().getIDTerminalRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SerieTemporelle__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SerieTemporelle__Group__0__Impl
	rule__SerieTemporelle__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SerieTemporelle__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSerieTemporelleAccess().getSerieTemporelleKeyword_0()); }
	'SerieTemporelle'
	{ after(grammarAccess.getSerieTemporelleAccess().getSerieTemporelleKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SerieTemporelle__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SerieTemporelle__Group__1__Impl
	rule__SerieTemporelle__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SerieTemporelle__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSerieTemporelleAccess().getIdAssignment_1()); }
	(rule__SerieTemporelle__IdAssignment_1)
	{ after(grammarAccess.getSerieTemporelleAccess().getIdAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SerieTemporelle__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SerieTemporelle__Group__2__Impl
	rule__SerieTemporelle__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SerieTemporelle__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSerieTemporelleAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getSerieTemporelleAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SerieTemporelle__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SerieTemporelle__Group__3__Impl
	rule__SerieTemporelle__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SerieTemporelle__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSerieTemporelleAccess().getMesureAssignment_3()); }
	(rule__SerieTemporelle__MesureAssignment_3)
	{ after(grammarAccess.getSerieTemporelleAccess().getMesureAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SerieTemporelle__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SerieTemporelle__Group__4__Impl
	rule__SerieTemporelle__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__SerieTemporelle__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSerieTemporelleAccess().getGroup_4()); }
	(rule__SerieTemporelle__Group_4__0)*
	{ after(grammarAccess.getSerieTemporelleAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SerieTemporelle__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SerieTemporelle__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SerieTemporelle__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSerieTemporelleAccess().getRightCurlyBracketKeyword_5()); }
	'}'
	{ after(grammarAccess.getSerieTemporelleAccess().getRightCurlyBracketKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SerieTemporelle__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SerieTemporelle__Group_4__0__Impl
	rule__SerieTemporelle__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SerieTemporelle__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSerieTemporelleAccess().getCommaKeyword_4_0()); }
	','
	{ after(grammarAccess.getSerieTemporelleAccess().getCommaKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SerieTemporelle__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SerieTemporelle__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SerieTemporelle__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSerieTemporelleAccess().getMesureAssignment_4_1()); }
	(rule__SerieTemporelle__MesureAssignment_4_1)
	{ after(grammarAccess.getSerieTemporelleAccess().getMesureAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Mesure__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Mesure__Group__0__Impl
	rule__Mesure__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Mesure__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMesureAccess().getValeurAssignment_0()); }
	(rule__Mesure__ValeurAssignment_0)
	{ after(grammarAccess.getMesureAccess().getValeurAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mesure__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Mesure__Group__1__Impl
	rule__Mesure__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Mesure__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMesureAccess().getTimestampAssignment_1()); }
	(rule__Mesure__TimestampAssignment_1)
	{ after(grammarAccess.getMesureAccess().getTimestampAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mesure__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Mesure__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Mesure__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMesureAccess().getGroup_2()); }
	(rule__Mesure__Group_2__0)?
	{ after(grammarAccess.getMesureAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Mesure__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Mesure__Group_2__0__Impl
	rule__Mesure__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Mesure__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMesureAccess().getQualifiKeyword_2_0()); }
	'qualifi\u00E9'
	{ after(grammarAccess.getMesureAccess().getQualifiKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mesure__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Mesure__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Mesure__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMesureAccess().getQualificationAssignment_2_1()); }
	(rule__Mesure__QualificationAssignment_2_1)
	{ after(grammarAccess.getMesureAccess().getQualificationAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AutoQualification__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AutoQualification__Group__0__Impl
	rule__AutoQualification__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AutoQualification__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAutoQualificationAccess().getAutomatiqueKeyword_0()); }
	'Automatique'
	{ after(grammarAccess.getAutoQualificationAccess().getAutomatiqueKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AutoQualification__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AutoQualification__Group__1__Impl
	rule__AutoQualification__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AutoQualification__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAutoQualificationAccess().getQCKeyword_1()); }
	'QC='
	{ after(grammarAccess.getAutoQualificationAccess().getQCKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AutoQualification__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AutoQualification__Group__2__Impl
	rule__AutoQualification__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AutoQualification__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAutoQualificationAccess().getQualitycodeAssignment_2()); }
	(rule__AutoQualification__QualitycodeAssignment_2)
	{ after(grammarAccess.getAutoQualificationAccess().getQualitycodeAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AutoQualification__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AutoQualification__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AutoQualification__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAutoQualificationAccess().getGroup_3()); }
	(rule__AutoQualification__Group_3__0)?
	{ after(grammarAccess.getAutoQualificationAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AutoQualification__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AutoQualification__Group_3__0__Impl
	rule__AutoQualification__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AutoQualification__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAutoQualificationAccess().getAlgoKeyword_3_0()); }
	'Algo'
	{ after(grammarAccess.getAutoQualificationAccess().getAlgoKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AutoQualification__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AutoQualification__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AutoQualification__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAutoQualificationAccess().getAlgoAssignment_3_1()); }
	(rule__AutoQualification__AlgoAssignment_3_1)
	{ after(grammarAccess.getAutoQualificationAccess().getAlgoAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ManuelleQualification__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ManuelleQualification__Group__0__Impl
	rule__ManuelleQualification__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ManuelleQualification__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getManuelleQualificationAccess().getManuelKeyword_0()); }
	'Manuel'
	{ after(grammarAccess.getManuelleQualificationAccess().getManuelKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ManuelleQualification__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ManuelleQualification__Group__1__Impl
	rule__ManuelleQualification__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ManuelleQualification__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getManuelleQualificationAccess().getQCKeyword_1()); }
	'QC='
	{ after(grammarAccess.getManuelleQualificationAccess().getQCKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ManuelleQualification__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ManuelleQualification__Group__2__Impl
	rule__ManuelleQualification__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ManuelleQualification__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getManuelleQualificationAccess().getQualitycodeAssignment_2()); }
	(rule__ManuelleQualification__QualitycodeAssignment_2)
	{ after(grammarAccess.getManuelleQualificationAccess().getQualitycodeAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ManuelleQualification__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ManuelleQualification__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ManuelleQualification__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getManuelleQualificationAccess().getCommentaireAssignment_3()); }
	(rule__ManuelleQualification__CommentaireAssignment_3)?
	{ after(grammarAccess.getManuelleQualificationAccess().getCommentaireAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EInt__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EInt__Group__0__Impl
	rule__EInt__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EInt__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEIntAccess().getHyphenMinusKeyword_0()); }
	('-')?
	{ after(grammarAccess.getEIntAccess().getHyphenMinusKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EInt__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EInt__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EInt__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEIntAccess().getINTTerminalRuleCall_1()); }
	RULE_INT
	{ after(grammarAccess.getEIntAccess().getINTTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SerieTemporelle__IdAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSerieTemporelleAccess().getIdIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getSerieTemporelleAccess().getIdIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SerieTemporelle__MesureAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSerieTemporelleAccess().getMesureMesureParserRuleCall_3_0()); }
		ruleMesure
		{ after(grammarAccess.getSerieTemporelleAccess().getMesureMesureParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SerieTemporelle__MesureAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSerieTemporelleAccess().getMesureMesureParserRuleCall_4_1_0()); }
		ruleMesure
		{ after(grammarAccess.getSerieTemporelleAccess().getMesureMesureParserRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mesure__ValeurAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMesureAccess().getValeurEIntParserRuleCall_0_0()); }
		ruleEInt
		{ after(grammarAccess.getMesureAccess().getValeurEIntParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mesure__TimestampAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMesureAccess().getTimestampEDateParserRuleCall_1_0()); }
		ruleEDate
		{ after(grammarAccess.getMesureAccess().getTimestampEDateParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mesure__QualificationAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMesureAccess().getQualificationQualificationParserRuleCall_2_1_0()); }
		ruleQualification
		{ after(grammarAccess.getMesureAccess().getQualificationQualificationParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AutoQualification__QualitycodeAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAutoQualificationAccess().getQualitycodeEIntParserRuleCall_2_0()); }
		ruleEInt
		{ after(grammarAccess.getAutoQualificationAccess().getQualitycodeEIntParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AutoQualification__AlgoAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAutoQualificationAccess().getAlgoEStringParserRuleCall_3_1_0()); }
		ruleEString
		{ after(grammarAccess.getAutoQualificationAccess().getAlgoEStringParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ManuelleQualification__QualitycodeAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getManuelleQualificationAccess().getQualitycodeEIntParserRuleCall_2_0()); }
		ruleEInt
		{ after(grammarAccess.getManuelleQualificationAccess().getQualitycodeEIntParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ManuelleQualification__CommentaireAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getManuelleQualificationAccess().getCommentaireEStringParserRuleCall_3_0()); }
		ruleEString
		{ after(grammarAccess.getManuelleQualificationAccess().getCommentaireEStringParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
