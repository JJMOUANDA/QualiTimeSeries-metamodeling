/*
 * generated by Xtext 2.27.0
 */
grammar InternalMy;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.qualificationdata.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.qualificationdata.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.qualificationdata.services.MyGrammarAccess;

}

@parser::members {

 	private MyGrammarAccess grammarAccess;

    public InternalMyParser(TokenStream input, MyGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "SerieTemporelle";
   	}

   	@Override
   	protected MyGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleSerieTemporelle
entryRuleSerieTemporelle returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSerieTemporelleRule()); }
	iv_ruleSerieTemporelle=ruleSerieTemporelle
	{ $current=$iv_ruleSerieTemporelle.current; }
	EOF;

// Rule SerieTemporelle
ruleSerieTemporelle returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='SerieTemporelle'
		{
			newLeafNode(otherlv_0, grammarAccess.getSerieTemporelleAccess().getSerieTemporelleKeyword_0());
		}
		(
			(
				lv_id_1_0=RULE_ID
				{
					newLeafNode(lv_id_1_0, grammarAccess.getSerieTemporelleAccess().getIdIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSerieTemporelleRule());
					}
					setWithLastConsumed(
						$current,
						"id",
						lv_id_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getSerieTemporelleAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSerieTemporelleAccess().getMesureMesureParserRuleCall_3_0());
				}
				lv_mesure_3_0=ruleMesure
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSerieTemporelleRule());
					}
					add(
						$current,
						"mesure",
						lv_mesure_3_0,
						"org.xtext.example.qualificationdata.My.Mesure");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4=','
			{
				newLeafNode(otherlv_4, grammarAccess.getSerieTemporelleAccess().getCommaKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSerieTemporelleAccess().getMesureMesureParserRuleCall_4_1_0());
					}
					lv_mesure_5_0=ruleMesure
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSerieTemporelleRule());
						}
						add(
							$current,
							"mesure",
							lv_mesure_5_0,
							"org.xtext.example.qualificationdata.My.Mesure");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getSerieTemporelleAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleMesure
entryRuleMesure returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMesureRule()); }
	iv_ruleMesure=ruleMesure
	{ $current=$iv_ruleMesure.current; }
	EOF;

// Rule Mesure
ruleMesure returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getMesureAccess().getValeurEIntParserRuleCall_0_0());
				}
				lv_valeur_0_0=ruleEInt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMesureRule());
					}
					set(
						$current,
						"valeur",
						lv_valeur_0_0,
						"org.xtext.example.qualificationdata.My.EInt");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getMesureAccess().getTimestampEDateParserRuleCall_1_0());
				}
				lv_timestamp_1_0=ruleEDate
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMesureRule());
					}
					set(
						$current,
						"timestamp",
						lv_timestamp_1_0,
						"org.xtext.example.qualificationdata.My.EDate");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2='qualifi\u00E9'
			{
				newLeafNode(otherlv_2, grammarAccess.getMesureAccess().getQualifiKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getMesureAccess().getQualificationQualificationParserRuleCall_2_1_0());
					}
					lv_qualification_3_0=ruleQualification
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMesureRule());
						}
						set(
							$current,
							"qualification",
							lv_qualification_3_0,
							"org.xtext.example.qualificationdata.My.Qualification");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleQualification
entryRuleQualification returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getQualificationRule()); }
	iv_ruleQualification=ruleQualification
	{ $current=$iv_ruleQualification.current; }
	EOF;

// Rule Qualification
ruleQualification returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getQualificationAccess().getAutoQualificationParserRuleCall_0());
		}
		this_AutoQualification_0=ruleAutoQualification
		{
			$current = $this_AutoQualification_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getQualificationAccess().getManuelleQualificationParserRuleCall_1());
		}
		this_ManuelleQualification_1=ruleManuelleQualification
		{
			$current = $this_ManuelleQualification_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAutoQualification
entryRuleAutoQualification returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAutoQualificationRule()); }
	iv_ruleAutoQualification=ruleAutoQualification
	{ $current=$iv_ruleAutoQualification.current; }
	EOF;

// Rule AutoQualification
ruleAutoQualification returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Automatique'
		{
			newLeafNode(otherlv_0, grammarAccess.getAutoQualificationAccess().getAutomatiqueKeyword_0());
		}
		otherlv_1='QC='
		{
			newLeafNode(otherlv_1, grammarAccess.getAutoQualificationAccess().getQCKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAutoQualificationAccess().getQualitycodeEIntParserRuleCall_2_0());
				}
				lv_qualitycode_2_0=ruleEInt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAutoQualificationRule());
					}
					set(
						$current,
						"qualitycode",
						lv_qualitycode_2_0,
						"org.xtext.example.qualificationdata.My.EInt");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3='Algo'
			{
				newLeafNode(otherlv_3, grammarAccess.getAutoQualificationAccess().getAlgoKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAutoQualificationAccess().getAlgoEStringParserRuleCall_3_1_0());
					}
					lv_algo_4_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAutoQualificationRule());
						}
						set(
							$current,
							"algo",
							lv_algo_4_0,
							"org.xtext.example.qualificationdata.My.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleManuelleQualification
entryRuleManuelleQualification returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getManuelleQualificationRule()); }
	iv_ruleManuelleQualification=ruleManuelleQualification
	{ $current=$iv_ruleManuelleQualification.current; }
	EOF;

// Rule ManuelleQualification
ruleManuelleQualification returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Manuel'
		{
			newLeafNode(otherlv_0, grammarAccess.getManuelleQualificationAccess().getManuelKeyword_0());
		}
		otherlv_1='QC='
		{
			newLeafNode(otherlv_1, grammarAccess.getManuelleQualificationAccess().getQCKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getManuelleQualificationAccess().getQualitycodeEIntParserRuleCall_2_0());
				}
				lv_qualitycode_2_0=ruleEInt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getManuelleQualificationRule());
					}
					set(
						$current,
						"qualitycode",
						lv_qualitycode_2_0,
						"org.xtext.example.qualificationdata.My.EInt");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getManuelleQualificationAccess().getCommentaireEStringParserRuleCall_3_0());
				}
				lv_commentaire_3_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getManuelleQualificationRule());
					}
					set(
						$current,
						"commentaire",
						lv_commentaire_3_0,
						"org.xtext.example.qualificationdata.My.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleEString
entryRuleEString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringRule()); }
	iv_ruleEString=ruleEString
	{ $current=$iv_ruleEString.current.getText(); }
	EOF;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleEInt
entryRuleEInt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEIntRule()); }
	iv_ruleEInt=ruleEInt
	{ $current=$iv_ruleEInt.current.getText(); }
	EOF;

// Rule EInt
ruleEInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEIntAccess().getHyphenMinusKeyword_0());
			}
		)?
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getEIntAccess().getINTTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleEDate
entryRuleEDate returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEDateRule()); }
	iv_ruleEDate=ruleEDate
	{ $current=$iv_ruleEDate.current.getText(); }
	EOF;

// Rule EDate
ruleEDate returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getEDateAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getEDateAccess().getIDTerminalRuleCall_1());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
