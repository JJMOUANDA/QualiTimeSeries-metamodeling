/*
 * generated by Xtext 2.27.0
 */
package org.xtext.example.qualificationdata.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.xtext.example.qualificationdata.services.MyGrammarAccess;
import qualificationData.AutoQualification;
import qualificationData.ManuelleQualification;
import qualificationData.Mesure;
import qualificationData.QualificationDataPackage;
import qualificationData.SerieTemporelle;

@SuppressWarnings("all")
public class MySemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == QualificationDataPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case QualificationDataPackage.AUTO_QUALIFICATION:
				sequence_AutoQualification(context, (AutoQualification) semanticObject); 
				return; 
			case QualificationDataPackage.MANUELLE_QUALIFICATION:
				sequence_ManuelleQualification(context, (ManuelleQualification) semanticObject); 
				return; 
			case QualificationDataPackage.MESURE:
				sequence_Mesure(context, (Mesure) semanticObject); 
				return; 
			case QualificationDataPackage.SERIE_TEMPORELLE:
				sequence_SerieTemporelle(context, (SerieTemporelle) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Qualification returns AutoQualification
	 *     AutoQualification returns AutoQualification
	 *
	 * Constraint:
	 *     (qualitycode=EInt algo=EString?)
	 * </pre>
	 */
	protected void sequence_AutoQualification(ISerializationContext context, AutoQualification semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Qualification returns ManuelleQualification
	 *     ManuelleQualification returns ManuelleQualification
	 *
	 * Constraint:
	 *     (qualitycode=EInt commentaire=EString?)
	 * </pre>
	 */
	protected void sequence_ManuelleQualification(ISerializationContext context, ManuelleQualification semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Mesure returns Mesure
	 *
	 * Constraint:
	 *     (valeur=EInt timestamp=EDate qualification=Qualification?)
	 * </pre>
	 */
	protected void sequence_Mesure(ISerializationContext context, Mesure semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     SerieTemporelle returns SerieTemporelle
	 *
	 * Constraint:
	 *     (id=ID mesure+=Mesure mesure+=Mesure*)
	 * </pre>
	 */
	protected void sequence_SerieTemporelle(ISerializationContext context, SerieTemporelle semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
