/*
 * generated by Xtext 2.27.0
 */
package org.xtext.example.qualificationdata.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class SerieTemporelleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.qualificationdata.My.SerieTemporelle");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSerieTemporelleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMesureAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMesureMesureParserRuleCall_3_0 = (RuleCall)cMesureAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cMesureAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cMesureMesureParserRuleCall_4_1_0 = (RuleCall)cMesureAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//// Définition d'une série temporelle
		//SerieTemporelle returns SerieTemporelle:
		//    'SerieTemporelle' id=ID '{'
		//        mesure+=Mesure ( "," mesure+=Mesure )*
		//    '}'
		//   ;
		@Override public ParserRule getRule() { return rule; }
		
		//'SerieTemporelle' id=ID '{'
		//    mesure+=Mesure ( "," mesure+=Mesure )*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'SerieTemporelle'
		public Keyword getSerieTemporelleKeyword_0() { return cSerieTemporelleKeyword_0; }
		
		//id=ID
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0() { return cIdIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//mesure+=Mesure
		public Assignment getMesureAssignment_3() { return cMesureAssignment_3; }
		
		//Mesure
		public RuleCall getMesureMesureParserRuleCall_3_0() { return cMesureMesureParserRuleCall_3_0; }
		
		//( "," mesure+=Mesure )*
		public Group getGroup_4() { return cGroup_4; }
		
		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//mesure+=Mesure
		public Assignment getMesureAssignment_4_1() { return cMesureAssignment_4_1; }
		
		//Mesure
		public RuleCall getMesureMesureParserRuleCall_4_1_0() { return cMesureMesureParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class MesureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.qualificationdata.My.Mesure");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValeurAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValeurEIntParserRuleCall_0_0 = (RuleCall)cValeurAssignment_0.eContents().get(0);
		private final Assignment cTimestampAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTimestampEDateParserRuleCall_1_0 = (RuleCall)cTimestampAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cQualifiKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cQualificationAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cQualificationQualificationParserRuleCall_2_1_0 = (RuleCall)cQualificationAssignment_2_1.eContents().get(0);
		
		//// Une mesure
		//Mesure returns Mesure:
		//    valeur=EInt timestamp=EDate ('qualifié' qualification=Qualification)?;
		@Override public ParserRule getRule() { return rule; }
		
		//valeur=EInt timestamp=EDate ('qualifié' qualification=Qualification)?
		public Group getGroup() { return cGroup; }
		
		//valeur=EInt
		public Assignment getValeurAssignment_0() { return cValeurAssignment_0; }
		
		//EInt
		public RuleCall getValeurEIntParserRuleCall_0_0() { return cValeurEIntParserRuleCall_0_0; }
		
		//timestamp=EDate
		public Assignment getTimestampAssignment_1() { return cTimestampAssignment_1; }
		
		//EDate
		public RuleCall getTimestampEDateParserRuleCall_1_0() { return cTimestampEDateParserRuleCall_1_0; }
		
		//('qualifié' qualification=Qualification)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'qualifié'
		public Keyword getQualifiKeyword_2_0() { return cQualifiKeyword_2_0; }
		
		//qualification=Qualification
		public Assignment getQualificationAssignment_2_1() { return cQualificationAssignment_2_1; }
		
		//Qualification
		public RuleCall getQualificationQualificationParserRuleCall_2_1_0() { return cQualificationQualificationParserRuleCall_2_1_0; }
	}
	public class QualificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.qualificationdata.My.Qualification");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAutoQualificationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cManuelleQualificationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// Définition d'une qualification
		//Qualification returns Qualification:
		//    AutoQualification | ManuelleQualification;
		@Override public ParserRule getRule() { return rule; }
		
		//AutoQualification | ManuelleQualification
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AutoQualification
		public RuleCall getAutoQualificationParserRuleCall_0() { return cAutoQualificationParserRuleCall_0; }
		
		//ManuelleQualification
		public RuleCall getManuelleQualificationParserRuleCall_1() { return cManuelleQualificationParserRuleCall_1; }
	}
	public class AutoQualificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.qualificationdata.My.AutoQualification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAutomatiqueKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cQCKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cQualitycodeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cQualitycodeEIntParserRuleCall_2_0 = (RuleCall)cQualitycodeAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cAlgoKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAlgoAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAlgoEStringParserRuleCall_3_1_0 = (RuleCall)cAlgoAssignment_3_1.eContents().get(0);
		
		//// Définition des types de qualifications
		//AutoQualification returns AutoQualification:
		//    'Automatique' 'QC=' qualitycode=EInt ('Algo' algo=EString)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'Automatique' 'QC=' qualitycode=EInt ('Algo' algo=EString)?
		public Group getGroup() { return cGroup; }
		
		//'Automatique'
		public Keyword getAutomatiqueKeyword_0() { return cAutomatiqueKeyword_0; }
		
		//'QC='
		public Keyword getQCKeyword_1() { return cQCKeyword_1; }
		
		//qualitycode=EInt
		public Assignment getQualitycodeAssignment_2() { return cQualitycodeAssignment_2; }
		
		//EInt
		public RuleCall getQualitycodeEIntParserRuleCall_2_0() { return cQualitycodeEIntParserRuleCall_2_0; }
		
		//('Algo' algo=EString)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'Algo'
		public Keyword getAlgoKeyword_3_0() { return cAlgoKeyword_3_0; }
		
		//algo=EString
		public Assignment getAlgoAssignment_3_1() { return cAlgoAssignment_3_1; }
		
		//EString
		public RuleCall getAlgoEStringParserRuleCall_3_1_0() { return cAlgoEStringParserRuleCall_3_1_0; }
	}
	public class ManuelleQualificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.qualificationdata.My.ManuelleQualification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cManuelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cQCKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cQualitycodeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cQualitycodeEIntParserRuleCall_2_0 = (RuleCall)cQualitycodeAssignment_2.eContents().get(0);
		private final Assignment cCommentaireAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCommentaireEStringParserRuleCall_3_0 = (RuleCall)cCommentaireAssignment_3.eContents().get(0);
		
		//ManuelleQualification returns ManuelleQualification:
		//    'Manuel' 'QC=' qualitycode=EInt commentaire=EString?;
		@Override public ParserRule getRule() { return rule; }
		
		//'Manuel' 'QC=' qualitycode=EInt commentaire=EString?
		public Group getGroup() { return cGroup; }
		
		//'Manuel'
		public Keyword getManuelKeyword_0() { return cManuelKeyword_0; }
		
		//'QC='
		public Keyword getQCKeyword_1() { return cQCKeyword_1; }
		
		//qualitycode=EInt
		public Assignment getQualitycodeAssignment_2() { return cQualitycodeAssignment_2; }
		
		//EInt
		public RuleCall getQualitycodeEIntParserRuleCall_2_0() { return cQualitycodeEIntParserRuleCall_2_0; }
		
		//commentaire=EString?
		public Assignment getCommentaireAssignment_3() { return cCommentaireAssignment_3; }
		
		//EString
		public RuleCall getCommentaireEStringParserRuleCall_3_0() { return cCommentaireEStringParserRuleCall_3_0; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.qualificationdata.My.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// Définition des types de données
		//EString returns ecore::EString: STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.qualificationdata.My.EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt returns ecore::EInt: '-'? INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class EDateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.qualificationdata.My.EDate");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EDate returns ecore::EDate: STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	
	
	private final SerieTemporelleElements pSerieTemporelle;
	private final MesureElements pMesure;
	private final QualificationElements pQualification;
	private final AutoQualificationElements pAutoQualification;
	private final ManuelleQualificationElements pManuelleQualification;
	private final EStringElements pEString;
	private final EIntElements pEInt;
	private final EDateElements pEDate;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pSerieTemporelle = new SerieTemporelleElements();
		this.pMesure = new MesureElements();
		this.pQualification = new QualificationElements();
		this.pAutoQualification = new AutoQualificationElements();
		this.pManuelleQualification = new ManuelleQualificationElements();
		this.pEString = new EStringElements();
		this.pEInt = new EIntElements();
		this.pEDate = new EDateElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.qualificationdata.My".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//// Définition d'une série temporelle
	//SerieTemporelle returns SerieTemporelle:
	//    'SerieTemporelle' id=ID '{'
	//        mesure+=Mesure ( "," mesure+=Mesure )*
	//    '}'
	//   ;
	public SerieTemporelleElements getSerieTemporelleAccess() {
		return pSerieTemporelle;
	}
	
	public ParserRule getSerieTemporelleRule() {
		return getSerieTemporelleAccess().getRule();
	}
	
	//// Une mesure
	//Mesure returns Mesure:
	//    valeur=EInt timestamp=EDate ('qualifié' qualification=Qualification)?;
	public MesureElements getMesureAccess() {
		return pMesure;
	}
	
	public ParserRule getMesureRule() {
		return getMesureAccess().getRule();
	}
	
	//// Définition d'une qualification
	//Qualification returns Qualification:
	//    AutoQualification | ManuelleQualification;
	public QualificationElements getQualificationAccess() {
		return pQualification;
	}
	
	public ParserRule getQualificationRule() {
		return getQualificationAccess().getRule();
	}
	
	//// Définition des types de qualifications
	//AutoQualification returns AutoQualification:
	//    'Automatique' 'QC=' qualitycode=EInt ('Algo' algo=EString)?;
	public AutoQualificationElements getAutoQualificationAccess() {
		return pAutoQualification;
	}
	
	public ParserRule getAutoQualificationRule() {
		return getAutoQualificationAccess().getRule();
	}
	
	//ManuelleQualification returns ManuelleQualification:
	//    'Manuel' 'QC=' qualitycode=EInt commentaire=EString?;
	public ManuelleQualificationElements getManuelleQualificationAccess() {
		return pManuelleQualification;
	}
	
	public ParserRule getManuelleQualificationRule() {
		return getManuelleQualificationAccess().getRule();
	}
	
	//// Définition des types de données
	//EString returns ecore::EString: STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//EInt returns ecore::EInt: '-'? INT;
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//EDate returns ecore::EDate: STRING | ID;
	public EDateElements getEDateAccess() {
		return pEDate;
	}
	
	public ParserRule getEDateRule() {
		return getEDateAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
